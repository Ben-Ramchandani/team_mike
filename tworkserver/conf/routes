# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                          controllers.Web.index()
POST	/page/upload	               controllers.Web.mapFile()
GET    /prime/:number              controllers.Web.primeTest(number: Long)

# Real-Time response page;

GET     /rt/:computationID           controllers.Display.index(computationID: String)
GET     /rt/socket/:computationID    controllers.Display.socket(computationID: String)
GET		/assets/js/display.js    	controllers.Display.script()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file             controllers.Assets.versioned(path="/public", file: Asset)

# Request files 

GET		/page/retrieve/:dataID		controllers.Web.retrieve(dataID: String)


# Availability request
# JSON:
#	phone-id       : string
#	battery-life   : 0 - 100
#	on-charge      : 0 / 1
#	on-WiFi		   : 0 / 1
# set cookie in the header; all the other requests should have that cookie set.
# also initialise session -> send ok().
GET    /available                  controllers.Application.available()

# Job request
# just include the cookie
#
#	This will return a json object:
#	job-id 			: long
#	function-class 	: string    -You call the URLCLassLoader.
# 	computation-id	: long
#	job-description : string
#	return a non 200 code if there is no job.
#
GET     /job                        controllers.Application.job()

# Data request
#  This will return a raw file and a 200 code.
GET		/data/:jobID				controllers.Application.data(jobID: Long)

#Code request
#Returns .class file as raw bytes
GET		/code/:functionName					controllers.Application.getDexCode(functionName: String)

GET		/test/code/:functionName			controllers.Application.getClassCode(functionName: String)
# Send result
#
#	Send the raw file -> empty is failed
#
#
POST    /result/:jobID              controllers.Application.result(jobID: Long)

#TODO: Customer login properly
#Add example computation
POST /test/add/:custName/:prime		controllers.Application.addComputation(custName: String, prime: Long)

#Clear database
GET /test/clear_db					controllers.Application.clear_db()


# That is for later

# Computation subscription
GET     /computation/:id            controllers.Application.subscribe(id: Long)




# Serialized vs URL
GET		/function/:functionID		controllers.Application.function(functionID: String)
